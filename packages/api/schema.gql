# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type NodeChannelEntity {
  id: ID!
  name: String!
  channel: Int!
  node: NodeEntity!
  node_id: ID!
}

type NodeEntity {
  id: ID!
  public_key: ID!
  type: NodeTypeEnum!
  name: String!
  nickname: String!
  channels: [NodeChannelEntity!]!
}

enum NodeTypeEnum {
  INPUT
  OUTPUT
}

type NetworkWifiDto {
  ssid: String!
  signal: Int!
  security: String
  channel: Int
}

type NetworkAvailableDto {
  name: String!
  type: NetworkTypeEnum!
}

enum NetworkTypeEnum {
  WIRED
  WIFI
}

type NetworkApCredentialsDto {
  ssid: String!
  password: String!
}

type NodeSetupCredentialsDto {
  ap_ssid: String!
  ap_password: String!
  mqtt_username: String!
  mqtt_password: String!
}

type Query {
  pingNetwork: Boolean!
  networkGetDetails: NetworkDetailUnion
  testGetNetworkGetDetails: NetworkDetailUnion
  testGetAvailableWifiNetworks: [NetworkWifiDto!]!
  testGetApInteface: String!
  testGetAvailableInterfaces: [NetworkAvailableDto!]!
  testGetActiveInterface: NetworkAvailableDto
  testGetActiveSSID: String
  testGetNodeApCredentials: NetworkApCredentialsDto!
  getNodeSetupCredentials: NodeSetupCredentialsDto!
  findAllNodes: [NodeEntity!]!
}

union NetworkDetailUnion = NetworkWifiDetailDto | NetworkWiredDetailDto

type NetworkWifiDetailDto {
  id: String!
  type: NetworkTypeEnum!
  ip4_address: String!
  ip4_address_type: NetworkIp4AddressTypeEnum!
  ip4_gateway: String!
  interface_name: String!
  ssid: String!
}

enum NetworkIp4AddressTypeEnum {
  STATIC
  DYNAMIC
}

type NetworkWiredDetailDto {
  id: String!
  type: NetworkTypeEnum!
  ip4_address: String!
  ip4_address_type: NetworkIp4AddressTypeEnum!
  ip4_gateway: String!
  interface_name: String!
}

type Mutation {
  networkSetIpAddressStatic(ip: String!): NetworkDetailUnion!
  networkSetIpAddressDynamic: NetworkDetailUnion!
  testConnectToWifi(ssid: String!, password: String!): BasicResponseEnum!
  testCreateApInterface: BasicResponseEnum!
  testDeleteApInterface: BasicResponseEnum!
  setupHubInstance(token: String!): BasicResponseEnum!
  createNode(input: CreateNodeInput!): NodeEntity!
}

enum BasicResponseEnum {
  SUCCESS
  FAIL
}

input CreateNodeInput {
  model_name: String!
  public_key: String!
  instance_key: ID!
  nickname: String!
  type: NodeTypeEnum!
  channels: [CreateNodeChannel!]
}

input CreateNodeChannel {
  name: String!
  channel: Int!
}